trigger:
  batch: 'true'
  branches:
    include:
    - master
    - main
    - bufix/*
    - release/*
    - hotfix/*
    - feature/*
  paths:
    exclude:
    - README.md

stages:
- stage: Build
  displayName: Building Multiple OS, Testing, Publishing
  jobs:
  - job: build
    displayName: Build
    workspace:
      clean: all

    strategy:
      matrix:
        Windows:
          osName: Windows_NT
          poolName: Default
          poolImageName:
          cmake.preset: Windows-Release
        Linux:
          osName: Linux
          poolName: Default
          poolImageName:
          cmake.preset: Linux-Release

    variables:
      buildConfiguration: 'Release'
      buildLatestTag: '0.0.0'

    pool:
      name: $(poolName)
      vmImage: $(poolImageName)
      demands:
        - Agent.OS -equals $(osName)

    steps:
    - checkout: self
      fetchDepth: 0

    - task: NuGetToolInstaller@1
      displayName: 'Install Nuget'
      inputs:
        versionSpec: '>=5.0.0-0'
        checkLatest: true

    - task: gitversion/setup@3.0.0
      displayName: 'Install GitVersion..'
      inputs:
        versionSpec: '6.x'
        preferLatestVersion: true

    - task: gitversion/execute@3.0.0
      displayName: 'Determine Version..'
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - script: echo %Action%%BuildVersion%
      displayName: 'Set build version to $(GitVersion.MajorMinorPatch)'
      env:
        Action: '##vso[build.updatebuildnumber]'
        BuildVersion: $(GitVersion.MajorMinorPatch)

    - task: CMake@1
      displayName: 'CMake Show Presets.. working at $(System.DefaultWorkingDirectory)/.. '
      inputs:
        cmakeArgs: '--list-presets=all'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: CMake@1
      displayName: 'CMake Configure --preset $(cmake.preset) -Dopt_timethis_testing=ON -Dopt_timethis_install=ON -DCI_BUILDID=$(GitVersion.MajorMinorPatch)'
      inputs:
        cmakeArgs: '--preset $(cmake.preset) -Dopt_timethis_testing=ON -Dopt_timethis_install=ON -DCI_BUILDID=$(GitVersion.MajorMinorPatch)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: CMake@1
      displayName: 'CMake --build . --config $(buildConfiguration)'
      inputs:
        cmakeArgs: '--build $(System.DefaultWorkingDirectory)/build/$(cmake.preset)'
      condition: succeeded()

    - task: CMake@1
      displayName: 'CMake -E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests ctest'
      inputs:
        cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests ctest $(System.DefaultWorkingDirectory)/build/$(cmake.preset) --output-junit $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/test_detail.xml --output-on-failure'
      condition: succeeded()
      continueOnError: false

    - task: PublishTestResults@2
      displayName: 'Publish $(buildConfiguration) Test Results test_detail.xml'
      inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/test_detail.xml'
          mergeTestResults: true
          buildConfiguration: '$(buildConfiguration)'
      continueOnError: false
      condition: succeeded()

    - task: PowerShell@2
      displayName: 'List the outputs and remove directories'
      inputs:
        targetType: 'inline'
        script: |
          echo "Removing the folders before we pack stuff.."
          Remove-Item -Recurse -Force -LiteralPath $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force -LiteralPath $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/_deps -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force -LiteralPath $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/Testing -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force -LiteralPath $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/lib -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force -LiteralPath $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/bin -ErrorAction SilentlyContinue
      condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Windows'))

    # Powershell is not supported on Pi aarch64 yet so we have to use this method for Linux
    - task: CmdLine@2
      displayName: 'Clean up folders on Linux machines'
      inputs:
        script: |
          echo "Removing the folders before we pack stuff.."
          rm -rdf $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests
          rm -rdf $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/_deps
          rm -rdf $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/Testing
          rm -rdf $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/lib
          rm -rdf $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/bin
      condition: and(succeeded(), or(startsWith(variables['Agent.OS'], 'Darwin'), startsWith(variables['Agent.OS'], 'Linux')) )

    - task: CMake@1
      displayName: 'CPack -E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset) cpack -C $(buildConfiguration) -G ZIP'
      inputs:
        cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset) cpack -C $(buildConfiguration) -G ZIP'
      continueOnError: false
      condition: and(succeeded(), or(startsWith(variables['Agent.OS'], 'Darwin'), startsWith(variables['Agent.OS'], 'Linux')) )

    - task: CopyFiles@2
      displayName: 'Copy ZIP CPack Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/build/$(cmake.preset)
        Contents: '*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      condition: and(succeeded(), or(startsWith(variables['Agent.OS'], 'Darwin'), startsWith(variables['Agent.OS'], 'Linux')) )

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'release'
        publishLocation: 'Container'
      condition: and(succeeded(), or(startsWith(variables['Agent.OS'], 'Darwin'), startsWith(variables['Agent.OS'], 'Linux')) )

    - task: NuGetCommand@2
      displayName: 'NuGet pack'
      inputs:
        command: 'pack'
        packagesToPack: 'nuget/*.nuspec'
        versioningScheme: 'off'
        buildProperties: 'VERSION=$(GitVersion.MajorMinorPatch)'
      condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Windows'))

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;build/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'sqs-nuget'
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Agent.OS'], 'Windows'))

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github-packages-sqs'
        repositoryName: 'siddiqsoft/TimeThis'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(build.buildNumber)'
        title: 'v$(build.buildNumber)'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Documentation https://siddiqsoft.github.io/TimeThis'
        isPreRelease: true
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        artifactsDirectory: $(Build.ArtifactStagingDirectory)
        assets: '$(Build.ArtifactStagingDirectory)/release/*.zip'
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Agent.OS'], 'Windows'))
